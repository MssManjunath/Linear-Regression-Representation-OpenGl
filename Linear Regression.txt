#include<GL/glut.h>
#include<stdio.h>
#include<math.h>
#include<string.h>
#include<time.h>

GLsizei wh = 1000, ww = 1000;

float PI = 3.14285714286;
int pointCount = 0, f;
float xmean = 0;
float ymean = 0;
float xs[26];
float xdif[26], ydif[26];
float mul[26], mulsum = 0;
float xsum = 0;
float val;
float c;
float a[5] = { 1,2,3,4,5 };
float b[5] = { 3,4,2,4,5 };
int c2 = 0;
static int menu_id;
static int submenu_id;

int maxpoints = 26;
struct node
{
	int id;
	float xCoordinate;
	float yCoordinate;
}points[26], point1[10];

void* fonts[] =
{
	GLUT_BITMAP_9_BY_15,
	GLUT_BITMAP_TIMES_ROMAN_10,
	GLUT_BITMAP_TIMES_ROMAN_24,
	GLUT_BITMAP_HELVETICA_12,
	GLUT_BITMAP_HELVETICA_10,
	GLUT_BITMAP_HELVETICA_18,
};
void output(int x, int y, char* string, int j)
{
	int len, i;
	glRasterPos2f(x, y);
	len = (int)strlen(string);
	for (i = 0; i < len; i++)
		glutBitmapCharacter(fonts[j], string[i]);
}

void drawCircle(float cx, float cy, float r, float num_segments)
{
	//theta- angle in radians of the point 
	//x- x coordinate of point
	//y- y coordinate of point
	float theta, x, y;
	if (c2 == 2)
		glColor3f(0.0, 1.0, 0.0);
	else if (c2 == 3)
		glColor3f(0.0, 0.0, 1.0);
	else if (c2 == 4)
		glColor3f(0.0, 1.0, 1.0);
	else if (c2 == 5)
		glColor3f(1.0, 0.0, 0.0);
	else if (c2 == 6)
		glColor3f(0.0, 0.0, 1.0);
	glBegin(GL_LINE_LOOP);

	for (int i = 0; i < num_segments; i++) {
		//compute new angle and get the x, y coordinate
		theta = 2.0f * PI * i / num_segments;
		x = r * cosf(theta);
		y = r * sinf(theta);

		//draw the point
		glVertex2f(x + cx, y + cy);
	}
	glEnd();

	//flush to output screen
	glFlush();

}



void myMouse(int btn, int state, int x, int y)
{
	y = wh - y;

	//left click: create nodes, join nodes
	if (btn == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
	{
		if (pointCount >= 26)
		{
			return;
		}
		//set the values of the new node
		points[pointCount].xCoordinate = x;
		points[pointCount].yCoordinate = y;
		points[pointCount].id = pointCount;
		drawCircle(x, y, 3, 200);

		//increase the point count
		pointCount++;

	}

	//right click: select source and destination nodes
	//if (btn == GLUT_RIGHT_BUTTON && state == GLUT_DOWN && (!sourceNodeCreated || !destinationNodeCreated))
	glutPostRedisplay();

}
void key(unsigned char key, int x, int y)
{
	switch (key)
	{
	case 'S':
	case 's':f = 1;
		break;
	case 'q':
	case 'Q':
		exit(0);
	}
	glutPostRedisplay();
}
void mean()
{
	int j = 0;
	xmean = 0;
	ymean = 0;
	mulsum = 0;
	xsum = 0;
	for (j = 0; j < pointCount; j++)
	{
		xmean = (xmean + points[j].xCoordinate);
		ymean = (ymean + points[j].yCoordinate);
	}
	xmean = xmean / pointCount;
	ymean = ymean / pointCount;
	for (j = 0; j < pointCount; j++)
	{
		xdif[j] = points[j].xCoordinate - xmean;
		ydif[j] = points[j].yCoordinate - ymean;
		xs[j] = xdif[j] * xdif[j];
		xsum = xsum + xs[j];
	}
	for (j = 0; j < pointCount; j++)
	{
		mul[j] = xdif[j] * ydif[j];
		mulsum = mulsum + mul[j];
	}
	val = mulsum / xsum;
	printf("\nxmean=%f\n", xmean);
	printf("ymean=%f\n", ymean);
	printf("xsum = %f\n", xsum);
	printf("m=%f", val);
	c = ymean - (val * xmean);
	printf("\nc=%f", c);
}
void drawline()
{
	int i;
	int j = 100;
	for (i = 0; i < 10; i++)
	{
		point1[i].yCoordinate = val * j + c;
		glBegin(GL_POINT);
		glVertex2f(i, point1[i].yCoordinate);
		glEnd();
	}
	glFlush();

}

void myReshape(GLsizei w, GLsizei h)
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0, w, 0, h);
	glMatrixMode(GL_MODELVIEW);
	glViewport(0, 0, w, h);
	ww = w;
	wh = h;
}

//window initilization
void myInit()
{
	glViewport(0, 0, ww, wh);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0, ww, 0, wh);
	glMatrixMode(GL_MODELVIEW);
	glClearColor(0.0, 0.0, 0.0, 1);
	glColor3f(1.0, 1.0, 1.0);
	// glPointSize(0);
	glLineWidth(3);
}

/*void display_hello()
{
	writeDistance(" Welcome! To The Simulation of Dijkstra's Algorithn.", 200, 900);
	writeDistance("#  Use Mouse Left Button to Create Nodes.", 250, 800);
	writeDistance("#  Select any two Nodes to form a Path.", 250, 770);
	writeDistance("#  Use Mouse Right Button to select Source and Destrination.", 250, 740);
	writeDistance("#  Press ENTER key to begin Dijkstra's Algorithm.", 250, 710);
}
*/

void myDisplay()
{
	int i = 0;
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	for (i = 0; i < pointCount; i++)
		drawCircle(points[i].xCoordinate, points[i].yCoordinate, 3, 200);
	if (f == 0)
	{
		glColor3f(1.0, 1.0, 0.0);
		output(280, 850, (char*)"JSS ACADEMY OF TECHNICAL EDUCATION", 2);
		output(420, 750, (char*)" MINI PROJECT ", 2);
		output(330, 700, (char*)"TOPIC:Linear Regression", 2);
		output(500, 400, (char*)"By:", 2);
		output(675, 380, (char*)"Rahul N", 2);
		output(675, 340, (char*)"1JS16CS076", 2);
		output(675, 300, (char*)"Sai Subramanya Manjunath", 2);
		output(675, 260, (char*)"1JS16CS088", 2);
		output(75, 100, (char*)"Press S to start", 2);
		output(675, 100, (char*)"Press Q to quit", 2);
		glFlush();
	}

	else
	{
		//glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		if (pointCount > 2)
		{
			mean();
			int j = 100;
			for (i = 0; i < 10; i++)
			{
				point1[i].yCoordinate = val * j + c;
				glBegin(GL_POINTS);
				glVertex2f(i * 100, point1[i].yCoordinate);
				glEnd();
				glBegin(GL_LINES);
				glVertex2f(0, point1[0].yCoordinate);
				glVertex2f(900, point1[9].yCoordinate);
				glEnd();
				j = j + 100;
			}
		}
	}
	glFlush();

}
static void menu(int mode)
{
	switch (mode)
	{
	case 0:c2 = 1;
		break;
	case 6:c2 = 2;
		break;
	case 3:c2 = 3;
		break;
	case 4:c2 = 4;
		break;
	case 5:c2 = 5;
		break;
	case 2: exit(0);
	}
	glutPostRedisplay();
}


int main(int argc, char **argv)
{
	//fixAdjMatrix();
	printf("Hello\n\n");
	glutInit(&argc, argv);
	glutInitWindowSize(ww, wh);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutCreateWindow("Linear Regression");
	myInit();
	glutReshapeFunc(myReshape);
	glutMouseFunc(myMouse);
	glutKeyboardFunc(key);
	glutCreateMenu(menu);
	submenu_id = glutCreateMenu(menu);
	glutAddMenuEntry("Green", 6);
	glutAddMenuEntry("Blue", 3);
	glutAddMenuEntry("Violet", 4);
	glutAddMenuEntry("Red", 5);
	menu_id = glutCreateMenu(menu);
	glutAddSubMenu("Color", submenu_id);
	glutAddMenuEntry("Quit", 2);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	glutDisplayFunc(myDisplay);
	glutMainLoop();

	return 0;
}





